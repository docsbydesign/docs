openapi: 3.1.0
info:
  title: Task Management API
  version: 1.0.0
paths:
  /users:
    get:
      summary: Get all users
      description: >
        Returns all users in the to-do service's database.
        This description is very long and takes up several
        lines of YAML in the OAS document.


        This operation has no path or query parameters.
        It takes two newlines in the text to create one new line
        in the documentation.
      responses:
        '200':
          description: Successful GET all users response
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
              examples:
                usersList:
                  $ref: '#/components/examples/UsersList'
        '404':
          description: The requested resource or instance wasn't found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_NotFound'

    post:
      summary: Add a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
            examples:
              newUser:
                $ref: '#/components/examples/NewUser'
      responses:
        '201':
          description: User added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                createdUser:
                  $ref: '#/components/examples/CreatedUser'

  /users/{userId}:
    get:
      summary: Get a user by ID
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                singleUser:
                  $ref: '#/components/examples/SingleUser'

        '404':
          description: The requested resource or instance wasn't found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_NotFound'

    patch:
      summary: Update a property of a user (excluding ID)
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPatch'
            examples:
              userPatch:
                $ref: '#/components/examples/UserPatch'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                updatedUser:
                  $ref: '#/components/examples/UpdatedUser'

        '404':
          description: The requested resource or instance wasn't found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_NotFound'

    delete:
      summary: Delete a user by ID
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user
          schema:
            type: integer
      responses:
        '204':
          description: User deleted successfully

        '404':
          description: The requested resource or instance wasn't found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_NotFound'

  /tasks:
    get:
      summary: Get all tasks
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
              examples:
                tasksList:
                  $ref: '#/components/examples/TasksList'

        '404':
          description: The requested resource or instance wasn't found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_NotFound'

    post:
      summary: Add a task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput'
            examples:
              newTask:
                $ref: '#/components/examples/NewTask'
      responses:
        '201':
          description: Task added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
              examples:
                createdTask:
                  $ref: '#/components/examples/CreatedTask'

  /tasks/{taskId}:
    get:
      summary: Get a task by ID
      parameters:
        - name: taskId
          in: path
          required: true
          description: ID of the task
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
              examples:
                singleTask:
                  $ref: '#/components/examples/SingleTask'

        '404':
          description: The requested resource or instance wasn't found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_NotFound'

    patch:
      summary: Update a property of a task (excluding ID)
      parameters:
        - name: taskId
          in: path
          required: true
          description: ID of the task
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskPatch'
            examples:
              taskPatch:
                $ref: '#/components/examples/TaskPatch'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
              examples:
                updatedTask:
                  $ref: '#/components/examples/UpdatedTask'

        '404':
          description: The requested resource or instance wasn't found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_NotFound'

    delete:
      summary: Delete a task by ID
      parameters:
        - name: taskId
          in: path
          required: true
          description: ID of the task
          schema:
            type: integer
      responses:
        '204':
          description: Task deleted successfully

        '404':
          description: The requested resource or instance wasn't found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_NotFound'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        last_name:
          type: string
        first_name:
          type: string
        email:
          type: string
          format: email
      required:
        - id
        - last_name
        - first_name
        - email
    
    UserInput:
      type: object
      properties:
        last_name:
          type: string
        first_name:
          type: string
        email:
          type: string
          format: email
      required:
        - last_name
        - first_name
        - email
    
    UserPatch:
      type: object
      properties:
        last_name:
          type: string
        first_name:
          type: string
        email:
          type: string
          format: email
      minProperties: 1
    
    Task:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        title:
          type: string
        description:
          type: string
        due_date:
          type: string
          format: date-time
        warning:
          type: integer
      required:
        - id
        - user_id
        - title
        - due_date
        - warning
    
    TaskInput:
      type: object
      properties:
        user_id:
          type: integer
        title:
          type: string
        description:
          type: string
        due_date:
          type: string
          format: date-time
        warning:
          type: integer
      required:
        - user_id
        - title
        - due_date
        - warning
    
    TaskPatch:
      type: object
      properties:
        user_id:
          type: integer
        title:
          type: string
        description:
          type: string
        due_date:
          type: string
          format: date-time
        warning:
          type: integer
      minProperties: 1

    Error_NotFound:
      description: "Returns an empty object {}"
      type: object
      nullable: true
      properties: {}
      additionalProperties: false
      maxProperties: 0
  
  examples:
    UsersList:
      summary: List of users
      value:
        users:
          - last_name: "Smith"
            first_name: "Ferdinand"
            email: "f.smith@example.com"
            id: 1
          - last_name: "Jones"
            first_name: "Jill"
            email: "j.jones@example.com"
            id: 2
          - last_name: "Martinez"
            first_name: "Marty"
            email: "m.martinez@example.com"
            id: 3
          - last_name: "Bailey"
            first_name: "Bill"
            email: "b.bailey@example.com"
            id: 4
    
    NewUser:
      summary: Example of new user data
      value:
        last_name: "Doe"
        first_name: "John"
        email: "j.doe@example.com"
    
    CreatedUser:
      summary: Example of newly created user
      value:
        id: 5
        last_name: "Doe"
        first_name: "John"
        email: "j.doe@example.com"
    
    SingleUser:
      summary: Example of a single user
      value:
        last_name: "Smith"
        first_name: "Ferdinand"
        email: "f.smith@example.com"
        id: 1
    
    UserPatch:
      summary: Example of user patch data
      value:
        email: "new.email@example.com"
    
    UpdatedUser:
      summary: Example of updated user
      value:
        last_name: "Smith"
        first_name: "Ferdinand"
        email: "new.email@example.com"
        id: 1
    
    TasksList:
      summary: List of tasks
      value:
        tasks:
          - user_id: 1
            title: "Grocery shopping"
            description: "eggs, bacon, gummy bears"
            due_date: "2024-02-20T17:00:00.000-05:00"
            warning: -60
            id: 1
          - user_id: 1
            title: "Piano recital"
            description: "Daughter's first concert appearance"
            due_date: "2024-04-02T15:00:00-05:00"
            warning: -30
            id: 2
          - user_id: 2
            title: "Oil change"
            description: "5K auto service"
            due_date: "2024-03-10T09:00:00-05:00"
            warning: -60
            id: 3
          - user_id: 3
            title: "Get shots for dog"
            description: "Annual vaccinations for poochy"
            due_date: "2024-05-11T14:00:00-05:00"
            warning: -20
            id: 4
    
    NewTask:
      summary: Example of new task data
      value:
        user_id: 1
        title: "New Task"
        description: "Description of the new task"
        due_date: "2024-06-01T12:00:00-05:00"
        warning: -5
    
    CreatedTask:
      summary: Example of newly created task
      value:
        id: 5
        user_id: 1
        title: "New Task"
        description: "Description of the new task"
        due_date: "2024-06-01T12:00:00-05:00"
        warning: -5
    
    SingleTask:
      summary: Example of a single task
      value:
        user_id: 1
        title: "Grocery shopping"
        description: "eggs, bacon, gummy bears"
        due_date: "2024-02-20T17:00:00-05:00"
        warning: -10
        id: 1
    
    TaskPatch:
      summary: Example of task patch data
      value:
        description: "Updated description"
    
    UpdatedTask:
      summary: Example of updated task
      value:
        user_id: 1
        title: "Grocery shopping"
        description: "Updated description"
        due_date: "2024-02-20T17:00:00-05:00"
        warning: -10
        id: 1